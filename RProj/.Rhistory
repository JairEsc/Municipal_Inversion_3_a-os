by.x="join",by.y='ID',all.x=T)
View(puntos_preliminares)
source("~/Jair/Repositorios/Municipal_Inversion_3_años/RProj/simulacro_de_agregar_geometrías_encontradas_a_mano.R", echo=TRUE)
View(puntos_preliminares)
puntos_preliminares=rbind(rbind(puntos_preliminares |> dplyr::select(-NOM_MUN),
puntos_simples |>
dplyr::select(Name,Obra,Rubro,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)),
multipuntos |>
dplyr::select(Name,Obra,Rubro,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)
)
puntos_preliminares |> dplyr::mutate(join=gsub("_","-",join)) |>
st_write("../Datos/spidus_geojson_by_id_mun_poquitos_update.geojson",driver = "GeoJSON",append = FALSE)
##Leemos el docs con el municipio encontrado
docs_sheets=readxl::read_excel("../Ocultos/Georeferenciacion_SIPDUS.xlsx")
##Y Eve
puntos_eve=docs_sheets |>
dplyr::filter(RESPONSABLE=='evelin'&!is.na(X))
kml_eve=puntos_eve |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
View(puntos_eve)
##Y Eve
puntos_eve=docs_sheets |>
dplyr::filter(RESPONSABLE=='evelin'&!is.na(X))
View(puntos_eve)
###Primero identificamos los que no se pudieron unir.
#Al menos habrá dos donde eran de cobertura estatal y se encontró el municipio
kmls_para_merge$Name[which(kmls_para_merge$Name |> lapply(\(x){!x%in%excel_separados_por_mun_para_merge$ID}) |> unlist())]
geometrias_encontradas_unica_vez=read_sf("../Ocultos/Localidades_Obras_Repetidas_una_Vez.shp")
###Algunas de estas geometrías aparecen una única vez (hay más de 5000 localidades en el estado)
###Se considera la geometría encontrada si aparece una única vez
library(sf)
geometrias_encontradas=read_sf("../Ocultos/Localidades_Obras.shp")
geometrias_encontradas_unica_vez=read_sf("../Ocultos/Localidades_Obras_Repetidas_una_Vez.shp")
geometrias_encontradas_unica_vez$geometry |> unique() |> length()
geometrias_encontradas=read_sf("../Ocultos/Localidades_Obras.shp")
geometrias_encontradas=read_sf("../Ocultos/Georeferenciadas por joins/Localidades_Obras.shp")
geometrias_encontradas_unica_vez=read_sf("../Ocultos/Georeferenciadas por joins/Localidades_Obras_Repetidas_una_Vez.shp")
View(geometrias_encontradas_unica_vez)
geometrias_encontradas_unica_vez_c_ID=geometrias_encontradas_unica_vez |>
dplyr::rowwise() |>
dplyr::mutate(ID_OBRA = str_c(unlist(strsplit(ID_OBRA, split = "_"))[1:2], collapse = "_")) |>
dplyr::ungroup()
geometrias_encontradas_unica_vez_c_ID=geometrias_encontradas_unica_vez |>
dplyr::rowwise() |>
dplyr::mutate(ID_OBRA = stringr::str_c(unlist(strsplit(ID_OBRA, split = "_"))[1:2], collapse = "_")) |>
dplyr::ungroup()
View(geometrias_encontradas_unica_vez_c_ID)
puntos_preliminares=st_read("../Datos/spidus_geojson_by_id_mun_poquitos.geojson")
zzz=geometrias_encontradas_unica_vez_c_ID |> dplyr::filter(!gsub("_","-",ID_OBRA)%in%puntos_preliminares$join)
View(zzz)
zzz=geometrias_encontradas_unica_vez_c_ID |> dplyr::filter(gsub("_","-",ID_OBRA)%in%puntos_preliminares$join)
View(zzz)
View(geometrias_encontradas_unica_vez_c_ID)
zzz2=puntos_preliminares |> dplyr::filter(gsub("-","-_",ID_OBRA)%in%geometrias_encontradas_unica_vez_c_ID$ID_OBRA)
View(geometrias_encontradas_unica_vez_c_ID)
geometrias_encontradas_unica_vez_c_ID$ID_OBRA
zzz2=puntos_preliminares |> dplyr::filter(gsub("-","-_",join)%in%geometrias_encontradas_unica_vez_c_ID$ID_OBRA)
zzz2=puntos_preliminares |> dplyr::filter(gsub("-","_",join)%in%geometrias_encontradas_unica_vez_c_ID$ID_OBRA)
View(zzz2)
zzz=geometrias_encontradas_unica_vez_c_ID |> dplyr::filter(gsub("_","-",ID_OBRA)%in%puntos_preliminares$join)
View(puntos_preliminares)
geometrias_encontradas_unica_vez_c_ID$ID_OBRA |> unique()
geometrias_encontradas_unica_vez_c_ID$ID_OBRA |> unique() |> length()
geometrias_encontradas_unica_vez_c_ID$ID_OBRA |> duplicated() |> which()
zzz=geometrias_encontradas_unica_vez_c_ID |>
dplyr::group_by(ID_OBRA) |> dplyr::summarise(geometry=st_combine(geometry))|> dplyr::filter(gsub("_","-",ID_OBRA)%in%puntos_preliminares$join)
zzz2=puntos_preliminares |> dplyr::filter(gsub("-","_",join)%in%geometrias_encontradas_unica_vez_c_ID$ID_OBRA)
zzz$geometry |> plot()
zzz2$geometry |> plot(add = T,col='red')
View(zzz)
library(leaflet)
leaflet() |> addTiles() |>
addMarkers(data=zzz,label = zzz$ID_OBRA) |>
addCircles(data=zzz2,label = zzz2$Obra.x,radius = 100)
leaflet() |> addTiles() |>
addMarkers(data=zzz,label = zzz$ID_OBRA)
leaflet() |> addTiles() |>
addMarkers(data=zzz |> st_cast("POINT"),label = zzz$ID_OBRA) |>
addCircles(data=zzz2|> st_cast("POINT"),label = zzz2$Obra.x,radius = 100)
View(municipios)
leaflet() |> addTiles() |>
addMarkers(data=zzz |> st_cast("POINT"),label = zzz$ID_OBRA) |>
addCircles(data=zzz2|> st_cast("POINT"),label = paste0(zzz2$Obra.x,'<br>',zzz2$join),radius = 100)
leaflet() |> addTiles() |>
addCircles(data=zzz |> st_cast("POINT"),label = zzz$ID_OBRA,color = "red") |>
addCircles(data=zzz2|> st_cast("POINT"),label = paste0(zzz2$Obra.x,'<br>',zzz2$join),radius = 100)
zzz |> st_cast("POINT") |> nrow()
zzz2|> st_cast("POINT") |> nrow()
View(fuente_0_sipdus_2306)
View(obras_ya_util)
View(simulacro_union)
##Leemos el docs con el municipio encontrado
docs_sheets=readxl::read_excel("../Ocultos/Georeferenciacion_SIPDUS.xlsx")
puntos_alfred=docs_sheets |>
dplyr::filter(RESPONSABLE=='Alfred'&!is.na(X))
kml_alfred=puntos_alfred |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326")) #EPSG:32614
##Y Emma
puntos_emma=docs_sheets |>
dplyr::filter(RESPONSABLE=='Emma'&!is.na(X))
kml_emma=puntos_emma |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
##Y Eve
puntos_eve=docs_sheets |>
dplyr::filter(RESPONSABLE=='evelin'&!is.na(X))
kml_eve=puntos_eve |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
#  st_transform(st_crs("EPSG:4326"))
puntos_kenn=docs_sheets |>
dplyr::filter(RESPONSABLE=='Kenneth'&!is.na(X))
#unzip(zipfile ="../Ocultos/Georeferenciados_a_mano/Obras_Jair.kmz" ,exdir = "../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Jair.kml")
#unzip(zipfile ="../Ocultos/Georeferenciados_a_mano/Sipdus_Kenneth.kmz" ,exdir = "../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Keneth.kml")
"../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Keneth.kml/doc.kml" |> st_read() |> nrow()
#unzip(zipfile ="../Ocultos/Georeferenciados_a_mano/Obras_Jair.kmz" ,exdir = "../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Jair.kml")
#unzip(zipfile ="../Ocultos/Georeferenciados_a_mano/Sipdus_Kenneth.kmz" ,exdir = "../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Keneth.kml")
"../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Keneth.kml/doc.kml" |> st_read() |> nrow()
##Leemos el docs con el municipio encontrado
docs_sheets=readxl::read_excel("../Ocultos/Georeferenciacion_SIPDUS.xlsx")
View(docs_sheets)
list.files(path = "../Ocultos/Georeferenciados_a_mano/",pattern = ".kml$",full.names = T,recursive = T)
list.files(path = "../Ocultos/Georeferenciados_a_mano/",pattern = ".kml$",full.names = T,recursive = T)
geometrias_encontradas=read_sf("../Ocultos/Georeferenciadas por joins/Localidades_Obras.shp")
geometrias_encontradas=read_sf("../Ocultos/Localidades_Obras.shp")
geometrias_encontradas=read_sf("../Ocultos/Georeferenciadas por joins/Localidades_Obras.shp")
fuente_3=fuente_1
###Había algunas modificaciones de forma que se le podían hacer.
#Por ejemplo cuando el municipio no era el correcto: E.g. decía cobertura regional y podía ser más específico
#Porque era san agustín tlax y pachuca
fuente_3$Municipio[fuente_3$No.==227]='Pachuca de Soto, San Agustín Tlaxiaca,Zapotlán de Juárez'
fuente_3$Municipio[fuente_3$No.==228]='Almoloya,Apan,Emiliano Zapata,Tepeapulco,Tlanalapa'
fuente_3=fuente_3|>
dplyr::mutate(
Municipio = dplyr::case_when(
Municipio == "Atotonilco El Grande" ~ "Atotonilco el Grande",
Municipio == "Epezoyucan" ~ "Epazoyucan",
Municipio == "Estatal" ~ "Cobertura Estatal",
Municipio == "Cobertura estatal" ~ "Cobertura Estatal",
Municipio == "Cobertura Regional" ~ "Cobertura Estatal",
Municipio == "Varios" ~ "Cobertura Estatal",
Municipio == "San salvador" ~ "San Salvador",
Municipio == "Tula de allende" ~ "Tula de Allende",
Municipio == "Francisco I Madero" ~ "Francisco I. Madero",
Municipio == "Nopala de Villagran" ~ "Nopala de Villagrán",
Municipio == "Pachuca" ~ "Pachuca de Soto",
Municipio == "San Agustín Meztquititlán" ~ "San Agustín Metzquititlán",
TRUE ~ Municipio
)
)
geometrias_encontradas=read_sf("../Ocultos/Georeferenciadas por joins/Localidades_Obras.shp")
fuente_3=fuente_1
##Entonces nos queda final:
fuente_1=plyr::rbind.fill(fuente_0_sipdus_2306_simples,fuente_0_sipdus_2306_varias_localidades_separadas,
fuente_0_sipdus_2306_varios_municipios_separados,fuente_0_sipdus_2306_varias_localidades_y_varios_municipios_separados_por_localidades)
fuente_1$ID_OBRA=paste0(fuente_1$No.,"_",fuente_1$Municipio,"_",fuente_1$Localidad)
##Desdoblamos fuente1 por municipio
fuente_2=fuente_1
###Había algunas modificaciones de forma que se le podían hacer.
#Por ejemplo cuando el municipio no era el correcto: E.g. decía cobertura regional y podía ser más específico
#Porque era san agustín tlax y pachuca
fuente_2$Municipio[fuente_2$No.==227]='Pachuca de Soto, San Agustín Tlaxiaca,Zapotlán de Juárez'
fuente_2$Municipio[fuente_2$No.==228]='Almoloya,Apan,Emiliano Zapata,Tepeapulco,Tlanalapa'
fuente_2=separar_por_comas_dado_campo(df=fuente_2,campo = "Municipio")
fuente_2=fuente_2 |>
dplyr::mutate(
Municipio = dplyr::case_when(
Municipio == "Atotonilco El Grande" ~ "Atotonilco el Grande",
Municipio == "Epezoyucan" ~ "Epazoyucan",
Municipio == "Estatal" ~ "Cobertura Estatal",
Municipio == "Cobertura estatal" ~ "Cobertura Estatal",
Municipio == "Cobertura Regional" ~ "Cobertura Estatal",
Municipio == "Varios" ~ "Cobertura Estatal",
Municipio == "San salvador" ~ "San Salvador",
Municipio == "Tula de allende" ~ "Tula de Allende",
Municipio == "Francisco I Madero" ~ "Francisco I. Madero",
Municipio == "Nopala de Villagran" ~ "Nopala de Villagrán",
Municipio == "Pachuca" ~ "Pachuca de Soto",
Municipio == "San Agustín Meztquititlán" ~ "San Agustín Metzquititlán",
TRUE ~ Municipio
)
)
fuente_3=fuente_1
###Había algunas modificaciones de forma que se le podían hacer.
#Por ejemplo cuando el municipio no era el correcto: E.g. decía cobertura regional y podía ser más específico
#Porque era san agustín tlax y pachuca
fuente_3$Municipio[fuente_3$No.==227]='Pachuca de Soto, San Agustín Tlaxiaca,Zapotlán de Juárez'
fuente_3$Municipio[fuente_3$No.==228]='Almoloya,Apan,Emiliano Zapata,Tepeapulco,Tlanalapa'
fuente_3=fuente_3|>
dplyr::mutate(
Municipio = dplyr::case_when(
Municipio == "Atotonilco El Grande" ~ "Atotonilco el Grande",
Municipio == "Epezoyucan" ~ "Epazoyucan",
Municipio == "Estatal" ~ "Cobertura Estatal",
Municipio == "Cobertura estatal" ~ "Cobertura Estatal",
Municipio == "Cobertura Regional" ~ "Cobertura Estatal",
Municipio == "Varios" ~ "Cobertura Estatal",
Municipio == "San salvador" ~ "San Salvador",
Municipio == "Tula de allende" ~ "Tula de Allende",
Municipio == "Francisco I Madero" ~ "Francisco I. Madero",
Municipio == "Nopala de Villagran" ~ "Nopala de Villagrán",
Municipio == "Pachuca" ~ "Pachuca de Soto",
Municipio == "San Agustín Meztquititlán" ~ "San Agustín Metzquititlán",
TRUE ~ Municipio
)
)
fuente_3=fuente_1
###Había algunas modificaciones de forma que se le podían hacer.
#Por ejemplo cuando el municipio no era el correcto: E.g. decía cobertura regional y podía ser más específico
#Porque era san agustín tlax y pachuca
fuente_3$Municipio[fuente_3$No.==227]='Pachuca de Soto, San Agustín Tlaxiaca,Zapotlán de Juárez'
fuente_3$Municipio[fuente_3$No.==228]='Almoloya,Apan,Emiliano Zapata,Tepeapulco,Tlanalapa'
fuente_3=fuente_3|>
dplyr::mutate(
Municipio = dplyr::case_when(
Municipio == "Atotonilco El Grande" ~ "Atotonilco el Grande",
Municipio == "Epezoyucan" ~ "Epazoyucan",
Municipio == "Estatal" ~ "Cobertura Estatal",
Municipio == "Cobertura estatal" ~ "Cobertura Estatal",
Municipio == "Cobertura Regional" ~ "Cobertura Estatal",
Municipio == "Varios" ~ "Cobertura Estatal",
Municipio == "San salvador" ~ "San Salvador",
Municipio == "Tula de allende" ~ "Tula de Allende",
Municipio == "Francisco I Madero" ~ "Francisco I. Madero",
Municipio == "Nopala de Villagran" ~ "Nopala de Villagrán",
Municipio == "Pachuca" ~ "Pachuca de Soto",
Municipio == "San Agustín Meztquititlán" ~ "San Agustín Metzquititlán",
TRUE ~ Municipio
)
)
geometrias_encontradas_c_ID=geometrias_encontradas |>
dplyr::rowwise() |>
dplyr::mutate(ID_OBRA = stringr::str_c(unlist(strsplit(ID_OBRA, split = "_"))[1:2], collapse = "_")) |>
dplyr::ungroup()
geometrias_matcheadas=geometrias_encontradas_c_ID |>
dplyr::filter(ID_OBRA%in%paste0(fuente_3$No.,"_",fuente_3$Municipio))
View(geometrias_matcheadas)
geometrias_no_matcheadas=geometrias_encontradas_unica_vez_c_ID |>
dplyr::filter(!ID_OBRA%in%paste0(fuente_3$No.,"_",fuente_3$Municipio))
View(geometrias_no_matcheadas)
##Todas las geometrías matcheadas se pueden agrupar por no._mun
geometrias_matcheadas |> dplyr::group_by(ID_OBRA) |> dplyr::summarise(st_combine(geometry)) |> nrow()
##Leemos el docs con el municipio encontrado
docs_sheets=readxl::read_excel("../Ocultos/Georeferenciacion_SIPDUS.xlsx")
View(docs_sheets)
##Leemos el docs con el municipio encontrado
docs_sheets=readxl::read_excel("../Ocultos/Georeferenciacion_SIPDUS.xlsx")
View(docs_sheets)
puntos_alfred=docs_sheets |>
dplyr::filter(RESPONSABLE=='Alfred'&!is.na(X))
kml_alfred=puntos_alfred |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326")) #EPSG:32614
##Y Emma
puntos_emma=docs_sheets |>
dplyr::filter(RESPONSABLE=='Emma'&!is.na(X))
kml_emma=puntos_emma |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
##Y Eve
puntos_eve=docs_sheets |>
dplyr::filter(RESPONSABLE=='evelin'&!is.na(X))
kml_eve=puntos_eve |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
#  st_transform(st_crs("EPSG:4326"))
puntos_kenn=docs_sheets |>
dplyr::filter(RESPONSABLE=='Kenneth'&!is.na(X))
kml_keneth=puntos_kenn |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
#unzip(zipfile ="../Ocultos/Georeferenciados_a_mano/Obras_Jair.kmz" ,exdir = "../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Jair.kml")
#unzip(zipfile ="../Ocultos/Georeferenciados_a_mano/Sipdus_Kenneth.kmz" ,exdir = "../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Keneth.kml")
#"../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Keneth.kml/doc.kml" |> st_read() |> nrow()
kmls=list.files(path = "../Ocultos/Georeferenciados_a_mano/",pattern = ".kml$",full.names = T,recursive = T) |>
lapply(st_read)
kmls=do.call(plyr::rbind.fill,kmls)
kmls=kmls |>
dplyr::select(-Description)
kmls=merge(kmls,docs_sheets,by.x ='Name',by.y='ID_OBRA',all.x=T) ##En este merge se pueden duplicar por los que agregarmos en
#localidad_encontrada (un mismo renglón se divide en varios porque la obra tenía más información)
##Como preliminar, dejamos los duplicados y luego tomamos la primera con el mismo ID
##Para el mapa web sirve. Para la base de obras no tanto. Pero eso está pendiente.
kmls=kmls |>
dplyr::group_by(Name,geometry) |>
dplyr::slice_head(n=1) |>
st_as_sf() |>
st_zm() |>
dplyr::filter(Name!='River of the birdnidas')
###
kmls=plyr::rbind.fill(kmls,kml_alfred,kml_emma,kml_eve,kml_keneth)
library(leaflet)
kmls_faltantes=kmls[grepl("\\,",kmls$municipios_original) & kmls$`municio encontrado` |> is.na(),] |> st_as_sf()|> st_zm()
leaflet() |> addTiles() |>
addMarkers(data=kmls_faltantes,
label =kmls_faltantes$Name)
#kmls$`municio encontrado`[grepl("\\,",kmls$municipios_original)& kmls$`municio encontrado` |> is.na()]=c("Pachuca de Soto","Ixmiquilpan","Chilcuautla")
kmls_faltantes=st_join(x = kmls_faltantes,y=municipios |> st_transform(st_crs("EPSG:4326")),join = st_within)
kmls_faltantes=kmls_faltantes |>
dplyr::mutate(`municio encontrado`=NOM_MUN)
###Si logro unirlas a fuente_3 ya quedaría, porque fuente_3 al reducirse por no_mun ya queda útil
kmls_full=rbind(kmls |> dplyr::filter(!(is.na(`municio encontrado`) & grepl("\\,",x = municipios_original))),
kmls_faltantes |> dplyr::select(Name:ID_OBRA)
)
kmls_full=kmls_full |> dplyr::mutate(Name=ifelse(Name |> is.na(),ID_OBRA,Name))
kmls_full=kmls_full |> dplyr::mutate(`municio encontrado`=ifelse(`municio encontrado` |> is.na(),municipios_original,`municio encontrado`))
all(!(kmls_full$Name |> is.na()))
kmls_para_merge=kmls_full |> st_as_sf()|>  st_zm() |> dplyr::select(Name,`municio encontrado`,`Localidad encontrada`,municipios_original) |>
dplyr::rowwise() |> dplyr::mutate(
Name = sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[1]
})
) |>
dplyr::mutate(`municio encontrado`=ifelse(!is.na(`municio encontrado`),`municio encontrado`,municipios_original)) |>
dplyr::mutate(Name=paste0(Name,"_",`municio encontrado`)) |>
dplyr::ungroup() |>
dplyr::group_by(Name) |>
dplyr::summarise(geometry=st_combine(geometry))
excel_separados_por_mun_para_merge=excel_separados_por_mun |>
dplyr::mutate(ID=paste0(No.,"_",Municipio))
###Primero identificamos los que no se pudieron unir.
#Al menos habrá dos donde eran de cobertura estatal y se encontró el municipio
kmls_para_merge$Name[which(kmls_para_merge$Name |> lapply(\(x){!x%in%excel_separados_por_mun_para_merge$ID}) |> unlist())]
simulacro_union=merge(kmls_para_merge,
excel_separados_por_mun_para_merge,
by.x='Name',by.y='ID')
View(simulacro_union)
simulacro_union |> st_write("../Datos/spidus_geojson_by_id_mun_poquitos_update.geojson",driver = "GeoJSON")
simulacro_union |> st_write("../Datos/spidus_geojson_by_id_mun_poquitos_update.geojson",driver = "GeoJSON")
View(simulacro_union)
simulacro_union |> dplyr::select(Name:Trabajos) |> st_write("../Datos/spidus_geojson_by_id_mun_poquitos_update.geojson",driver = "GeoJSON")
simulacro_union |> dplyr::select(Name:Trabajos) |> st_write("../Datos/simulacro_union",driver = "GeoJSON")
simulacro_union$geometry |> plot()
View(simulacro_union)
View(kmls_para_merge)
kmls_para_merge$geometry |> plot()
kmls_para_merge$geometry |> plot()
kmls_para_merge$geometry |> plot(col='red')
View(kmls_para_merge)
View(docs_sheets)
library(leaflet)
leaflet() |> addTiles() |> addCircleMarkers(data=kmls_full, label = paste(kmls_full$RESPONSABLE,kmls_full$Name))
leaflet() |> addTiles() |> addCircleMarkers(data=kmls_full |> st_as_sf(), label = paste(kmls_full$RESPONSABLE,kmls_full$Name))
View(simulacro_union)
View(geometrias_matcheadas)
##Todas las geometrías matcheadas se pueden agrupar por no._mun
geometrias_matcheadas |> dplyr::group_by(ID_OBRA) |> dplyr::summarise(st_combine(geometry)) |> nrow()
##Por otro lado, tenemos el simulacro de unión.
simulacro_union$Name |> unique() |> length()
1289+175
##Llevamos información quizás incompleta en 356 obras de las 1574
geometrias_matcheadas_por_no_mun=geometrias_matcheadas |>
dplyr::group_by(ID_OBRA) |> dplyr::summarise(geometry=st_combine(geometry))
View(geometrias_matcheadas_por_no_mun)
View(geometrias_matcheadas)
geometrias_matcheadas_por_no_mun=merge(geometrias_matcheadas_por_no_mun,
geometrias_matcheadas |> st_drop_geometry(),
by='IDE_OBRA',all.x=T)
geometrias_matcheadas_por_no_mun=merge(geometrias_matcheadas_por_no_mun,
geometrias_matcheadas |> st_drop_geometry(),
by='ID_OBRA',all.x=T)
View(geometrias_matcheadas_por_no_mun)
##Llevamos información quizás incompleta en 356 obras de las 1574
geometrias_matcheadas_por_no_mun=geometrias_matcheadas |>
dplyr::group_by(ID_OBRA) |> dplyr::summarise(geometry=st_combine(geometry))
geometrias_matcheadas_por_no_mun=merge(geometrias_matcheadas_por_no_mun,
geometrias_matcheadas |> st_drop_geometry() |>
dplyr::group_by(ID_OBRA) |>
dplyr::slice_head(n=1),
by='ID_OBRA',all.x=T)
View(geometrias_matcheadas_por_no_mun)
View(simulacro_union)
##Leemos el docs con el municipio encontrado
docs_sheets=readxl::read_excel("../Ocultos/Georeferenciacion_SIPDUS.xlsx")
puntos_alfred=docs_sheets |>
dplyr::filter(RESPONSABLE=='Alfred'&!is.na(X))
kml_alfred=puntos_alfred |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326")) #EPSG:32614
##Y Emma
puntos_emma=docs_sheets |>
dplyr::filter(RESPONSABLE=='Emma'&!is.na(X))
kml_emma=puntos_emma |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
##Y Eve
puntos_eve=docs_sheets |>
dplyr::filter(RESPONSABLE=='evelin'&!is.na(X))
kml_eve=puntos_eve |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
#  st_transform(st_crs("EPSG:4326"))
puntos_kenn=docs_sheets |>
dplyr::filter(RESPONSABLE=='Kenneth'&!is.na(X))
kml_keneth=puntos_kenn |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
#unzip(zipfile ="../Ocultos/Georeferenciados_a_mano/Obras_Jair.kmz" ,exdir = "../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Jair.kml")
#unzip(zipfile ="../Ocultos/Georeferenciados_a_mano/Sipdus_Kenneth.kmz" ,exdir = "../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Keneth.kml")
#"../Ocultos/Georeferenciados_a_mano/Nueva carpeta/Keneth.kml/doc.kml" |> st_read() |> nrow()
kmls=list.files(path = "../Ocultos/Georeferenciados_a_mano/",pattern = ".kml$",full.names = T,recursive = T) |>
lapply(st_read)
kmls=do.call(plyr::rbind.fill,kmls)
kmls=kmls |>
dplyr::select(-Description)
kmls=merge(kmls,docs_sheets,by.x ='Name',by.y='ID_OBRA',all.x=T) ##En este merge se pueden duplicar por los que agregarmos en
#localidad_encontrada (un mismo renglón se divide en varios porque la obra tenía más información)
##Como preliminar, dejamos los duplicados y luego tomamos la primera con el mismo ID
##Para el mapa web sirve. Para la base de obras no tanto. Pero eso está pendiente.
kmls=kmls |>
dplyr::group_by(Name,geometry) |>
dplyr::slice_head(n=1) |>
st_as_sf() |>
st_zm() |>
dplyr::filter(Name!='River of the birdnidas')
###
kmls=plyr::rbind.fill(kmls,kml_alfred,kml_emma,kml_eve,kml_keneth)
library(leaflet)
kmls_faltantes=kmls[grepl("\\,",kmls$municipios_original) & kmls$`municio encontrado` |> is.na(),] |> st_as_sf()|> st_zm()
#kmls$`municio encontrado`[grepl("\\,",kmls$municipios_original)& kmls$`municio encontrado` |> is.na()]=c("Pachuca de Soto","Ixmiquilpan","Chilcuautla")
kmls_faltantes=st_join(x = kmls_faltantes,y=municipios |> st_transform(st_crs("EPSG:4326")),join = st_within)
kmls_faltantes=kmls_faltantes |>
dplyr::mutate(`municio encontrado`=NOM_MUN)
###Si logro unirlas a fuente_3 ya quedaría, porque fuente_3 al reducirse por no_mun ya queda útil
kmls_full=rbind(kmls |> dplyr::filter(!(is.na(`municio encontrado`) & grepl("\\,",x = municipios_original))),
kmls_faltantes |> dplyr::select(Name:ID_OBRA)
)
kmls_full=kmls_full |> dplyr::mutate(Name=ifelse(Name |> is.na(),ID_OBRA,Name))
kmls_full=kmls_full |> dplyr::mutate(`municio encontrado`=ifelse(`municio encontrado` |> is.na(),municipios_original,`municio encontrado`))
all(!(kmls_full$Name |> is.na()))
kmls_para_merge=kmls_full |> st_as_sf()|>  st_zm() |> dplyr::select(Name,`municio encontrado`,`Localidad encontrada`,municipios_original) |>
dplyr::rowwise() |> dplyr::mutate(
Name = sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[1]
})
) |>
dplyr::mutate(`municio encontrado`=ifelse(!is.na(`municio encontrado`),`municio encontrado`,municipios_original)) |>
dplyr::mutate(Name=paste0(Name,"_",`municio encontrado`)) |>
dplyr::ungroup() |>
dplyr::group_by(Name) |>
dplyr::summarise(geometry=st_combine(geometry))
excel_separados_por_mun_para_merge=excel_separados_por_mun |>
dplyr::mutate(ID=paste0(No.,"_",Municipio))
###Primero identificamos los que no se pudieron unir.
#Al menos habrá dos donde eran de cobertura estatal y se encontró el municipio
kmls_para_merge$Name[which(kmls_para_merge$Name |> lapply(\(x){!x%in%excel_separados_por_mun_para_merge$ID}) |> unlist())]
simulacro_union=merge(kmls_para_merge,
excel_separados_por_mun_para_merge,
by.x='Name',by.y='ID')
leaflet() |> addTiles() |> addCircleMarkers(data=kmls_full |> st_as_sf(), label = paste(kmls_full$RESPONSABLE,kmls_full$Name))
View(geometrias_matcheadas_por_no_mun)
##Por otro lado, tenemos el simulacro de unión.
geometrias_matcheadas_por_no_mun |> colnames()
simulacro_union |> colnames()
rbind(geometrias_matcheadas_por_no_mun|> dplyr::select(ID_OBRA,NOM_MUN,Obra,Rubro),
simulacro_union |> dplyr::select(name,Municipio,Obra,Rubro) |>
dplyr::rename(ID_OBRA=name,
NOM_MUN=Municipio))
zzz=rbind(geometrias_matcheadas_por_no_mun|> dplyr::select(ID_OBRA,NOM_MUN,Obra,Rubro),
simulacro_union |> dplyr::select(name,Municipio,Obra,Rubro) |>
dplyr::rename(ID_OBRA=name,
NOM_MUN=Municipio))
zzz |> st_write("../Ocultos/prototipo_geojson_para_resumen_NO_MUNICIPIO.geojson",driver = "GeoJSON")
View(zzz)
View(geometrias_matcheadas_por_no_mun)
View(simulacro_union)
View(geometrias_matcheadas_por_no_mun)
View(simulacro_union)
zzz=rbind(geometrias_matcheadas_por_no_mun|> dplyr::select(ID_OBRA,NOM_MUN,Obra,Rubro),
simulacro_union |> dplyr::select(Name,Municipio,Obra,Rubro) |>
dplyr::rename(ID_OBRA=Name,
NOM_MUN=Municipio))
View(zzz)
zzz |> st_write("../Ocultos/prototipo_geojson_para_resumen_NO_MUNICIPIO.geojson",driver = "GeoJSON")
View(zzz)
zzz$ID_OBRA |> unique() |> length()
zzz |> dplyr::group_by(ID_OBRA) |>
dplyr::summarise(geometry=st_combine(geometry)) |> st_write("../Ocultos/prototipo_geojson_para_resumen_NO_MUNICIPIO.geojson",driver = "GeoJSON")
