dplyr::filter(RESPONSABLE=='Emma'&!is.na(X))
kml_emma=puntos_emma |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
kml_emma=kml_emma |>
st_transform(st_crs("EPSG:4326"))
View(puntos_emma)
View(kml_emma)
View(puntos_emma)
kmls=list.files(path = "../Ocultos/Georeferenciados_a_mano/",pattern = ".kml$",full.names = T,recursive = T) |>
lapply(st_read)
kmls=do.call(plyr::rbind.fill,kmls)
kmls=kmls |>
dplyr::select(-Description)
kmls=merge(kmls,docs_sheets,by.x ='Name',by.y='ID_OBRA',all.x=T) ##En este merge se pueden duplicar por los que agregarmos en
#localidad_encontrada (un mismo renglón se divide en varios porque la obra tenía más información)
##Como preliminar, dejamos los duplicados y luego tomamos la primera con el mismo ID
##Para el mapa web sirve. Para la base de obras no tanto. Pero eso está pendiente.
kmls=kmls |>
dplyr::group_by(Name,geometry) |>
dplyr::slice_head(n=1) |>
st_as_sf() |>
st_zm() |>
dplyr::filter(Name!='River of the birdnidas')
###
kmls=plyr::rbind.fill(kmls,kml_alfred,kml_emma)
View(kmls)
leaflet() |> addTiles() |>
addMarkers(data=kmls_faltantes,
label =kmls_faltantes$Name)
#kmls$`municio encontrado`[grepl("\\,",kmls$municipios_original)& kmls$`municio encontrado` |> is.na()]=c("Pachuca de Soto","Ixmiquilpan","Chilcuautla")
kmls_faltantes=st_join(x = kmls_faltantes,y=municipios |> st_transform(st_crs("EPSG:4326")),join = st_within)
View(kmls_faltantes)
kmls=list.files(path = "../Ocultos/Georeferenciados_a_mano/",pattern = ".kml$",full.names = T,recursive = T) |>
lapply(st_read)
kmls=do.call(plyr::rbind.fill,kmls)
kmls=kmls |>
dplyr::select(-Description)
kmls=merge(kmls,docs_sheets,by.x ='Name',by.y='ID_OBRA',all.x=T) ##En este merge se pueden duplicar por los que agregarmos en
#localidad_encontrada (un mismo renglón se divide en varios porque la obra tenía más información)
##Como preliminar, dejamos los duplicados y luego tomamos la primera con el mismo ID
##Para el mapa web sirve. Para la base de obras no tanto. Pero eso está pendiente.
kmls=kmls |>
dplyr::group_by(Name,geometry) |>
dplyr::slice_head(n=1) |>
st_as_sf() |>
st_zm() |>
dplyr::filter(Name!='River of the birdnidas')
###
kmls=plyr::rbind.fill(kmls,kml_alfred,kml_emma)
View(kmls)
kmls_faltantes=kmls[grepl("\\,",kmls$municipios_original)& kmls$`municio encontrado` |> is.na(),] |> st_as_sf()|> st_zm()
#kmls$`municio encontrado`[grepl("\\,",kmls$municipios_original)& kmls$`municio encontrado` |> is.na()]=c("Pachuca de Soto","Ixmiquilpan","Chilcuautla")
kmls_faltantes=st_join(x = kmls_faltantes,y=municipios |> st_transform(st_crs("EPSG:4326")),join = st_within)
View(kmls_faltantes)
kmls_faltantes=kmls_faltantes |>
dplyr::mutate(`municio encontrado`=NOM_MUN)
View(kmls_faltantes)
###Si logro unirlas a fuente_3 ya quedaría, porque fuente_3 al reducirse por no_mun ya queda útil
kmls_full=rbind(kmls |> dplyr::filter(!(is.na(`municio encontrado`) & grepl("\\,",x = municipios_original))),
kmls_faltantes |> dplyr::select(Name:ID_OBRA)
)
kmls_full=kmls_full |> dplyr::mutate(Name=ifelse(Name |> is.na(),ID_OBRA,Name))
kmls_full=kmls_full |> dplyr::mutate(`municio encontrado`=ifelse(`municio encontrado` |> is.na(),municipios_original,`municio encontrado`))
all(!(kmls$Name |> is.na()))
all(!(kmls_full$Name |> is.na()))
View(kmls_full)
kmls_para_merge=kmls_full |> st_as_sf()|>  st_zm() |> dplyr::select(Name,`municio encontrado`,`Localidad encontrada`,municipios_original) |>
dplyr::rowwise() |> dplyr::mutate(
Name = sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[1]
})
) |>
dplyr::mutate(`municio encontrado`=ifelse(!is.na(`municio encontrado`),`municio encontrado`,municipios_original)) |>
dplyr::mutate(Name=paste0(Name,"_",`municio encontrado`)) |>
dplyr::ungroup() |>
dplyr::group_by(Name) |>
dplyr::summarise(geometry=st_combine(geometry))
excel_separados_por_mun_para_merge=excel_separados_por_mun |>
dplyr::mutate(ID=paste0(No.,"_",Municipio))
###Primero identificamos los que no se pudieron unir.
#Al menos habrá dos donde eran de cobertura estatal y se encontró el municipio
kmls_para_merge$Name[which(kmls_para_merge$Name |> lapply(\(x){!x%in%excel_separados_por_mun_para_merge$ID}) |> unlist())]
simulacro_union=merge(kmls_para_merge,
excel_separados_por_mun_para_merge,
by.x='Name',by.y='ID')
View(simulacro_union)
View(simulacro_union)
simulacro_union$Name |> lapply(\(x){!x%in%gsub(pattern = "-",replacement = "",puntos_preliminares$join)}) |>
unlist()
View(puntos_preliminares)
View(simulacro_union)
View(puntos_preliminares)
puntos_preliminares$join |> unique() |> length()
View(kmls_para_merge)
rbind(puntos_preliminares,
simulacro_union |>
dplyr::select(Name,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr:rename(join=Name))
simulacro_union |>
dplyr::select(Name,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
)
simulacro_union |>
dplyr::select(Name,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr:rename(join=Name)
rbind(puntos_preliminares,
simulacro_union |>
dplyr::select(Name,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name)
)
View(puntos_preliminares)
View(simulacro_union)
View(puntos_preliminares)
rbind(puntos_preliminares,
simulacro_union |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)
)
puntos_preliminares=rbind(puntos_preliminares,
simulacro_union |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)
)
View(puntos_preliminares)
puntos_preliminares |>
st_write("../Datos/spidus_geojson_by_id_mun_poquitos_update.geojson",driver = "GeoJSON")
View(simulacro_union)
##Todos son nuevos!
simulacro_union[st_cast(simulacro_union$geometry) |> lapply(length)==1,]
##Todos son nuevos!
simulacro_union[st_cast(simulacro_union$geometry,"Point") |> lapply(length)==1,]
##Todos son nuevos!
simulacro_union[st_cast(simulacro_union$geometry,"POINT") |> lapply(length)==1,]
st_cast(simulacro_union$geometry,"POINT")
st_cast(simulacro_union,"POINT")
##Todos son nuevos!
simulacro_union$Name |> unique() |> length()
simulacro_union |> st_cast("POINT") |>
dplyr::group_by(Name) |>
dplyr::summarise(conteo=dplyr::n)
simulacro_union |> st_cast("POINT") |>
dplyr::group_by(Name) |>
dplyr::summarise(conteo=dplyr::n())
simulacro_union |> st_cast("POINT") |>
dplyr::group_by(Name) |>
dplyr::summarise(conteo=dplyr::n()) |>
dplyr::filter(conteo==1)
simulacro_union |> st_cast("POINT") |>
dplyr::group_by(Name) |>
dplyr::summarise(conteo=dplyr::n()) |>
dplyr::filter(conteo==1) |> dplyr::select(Name) |> unlist() |> as.vector()
simulacro_union |> st_cast("POINT") |>
dplyr::group_by(Name) |>
dplyr::summarise(conteo=dplyr::n()) |>
dplyr::filter(conteo==1) |> st_drop_geometry()|> dplyr::select(Name) |> unlist() |> as.vector()
simulacro_union[simulacro_union$Name |> lapply(\(x)x%in% (simulacro_union |> st_cast("POINT") |>
dplyr::group_by(Name) |>
dplyr::summarise(conteo=dplyr::n()) |>
dplyr::filter(conteo==1) |> st_drop_geometry()|> dplyr::select(Name) |> unlist() |> as.vector())),]
puntos_simples=simulacro_union |> st_cast("POINT") |>
dplyr::group_by(Name) |>
dplyr::summarise(conteo=dplyr::n()) |>
dplyr::filter(conteo==1)
View(puntos_simples)
simulacro_union[puntos_simples$Name,]
simulacro_union |> dplyr::filter(Name%in%puntos_simples$Name)
puntos_simples=simulacro_union |> dplyr::filter(Name%in%puntos_simples$Name)
View(puntos_simples)
puntos_simples=simulacro_union |> st_cast("POINT") |>
dplyr::group_by(Name) |>
dplyr::summarise(conteo=dplyr::n()) |>
dplyr::filter(conteo==1)
puntos_simples=simulacro_union |> dplyr::filter(Name%in%puntos_simples$Name) |>
st_cast("POINT")
View(puntos_simples)
View(puntos_simples)
multipuntos=simulacro_union |>
dplyr::filter(!Name%in%puntos_simples$Name)
46+95
puntos_preliminares=rbind(puntos_preliminares,
puntos_simples |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra),
multipuntos |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra),
)
puntos_preliminares=rbind(rbind(puntos_preliminares,
puntos_simples |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)),
multipuntos |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra),
))
puntos_preliminares=rbind(rbind(puntos_preliminares,
puntos_simples |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)),
multipuntos |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra),
)
View(puntos_preliminares)
puntos_preliminares=st_read("../Datos/spidus_geojson_by_id_mun_poquitos.geojson")
puntos_preliminares=rbind(rbind(puntos_preliminares,
puntos_simples |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)),
multipuntos |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra),
)
rbind(puntos_preliminares,
puntos_simples |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra))
multipuntos |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)
puntos_preliminares=rbind(rbind(puntos_preliminares,
puntos_simples |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)),
multipuntos |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)
)
View(puntos_preliminares)
puntos_preliminares |>
st_write("../Datos/spidus_geojson_by_id_mun_poquitos_update.geojson",driver = "GeoJSON")
simulacro_union$Name |> lapply(\(x){!x%in%gsub(pattern = "-",replacement = "_",puntos_preliminares$join)}) |>
unlist()
View(simulacro_union)
View(puntos_preliminares)
gsub(pattern = "-",replacement = "_",puntos_preliminares$join)
simulacro_union$Name |> lapply(\(x){!x%in%gsub(pattern = "-",replacement = "_",puntos_preliminares$join)}) |>
unlist()
simulacro_union$Name |> lapply(\(x){x%in%gsub(pattern = "-",replacement = "_",puntos_preliminares$join)}) |>
unlist()
View(simulacro_union)
puntos_preliminares=st_read("../Datos/spidus_geojson_by_id_mun_poquitos.geojson")
simulacro_union$Name |> lapply(\(x){!x%in%gsub(pattern = "-",replacement = "_",puntos_preliminares$join)}) |>
unlist()
simulacro_union$Name |> lapply(\(x){!x%in%gsub(pattern = "-",replacement = "_",puntos_preliminares$join)}) |>
unlist() |> sum()
View(puntos_simples)
puntos_preliminares=rbind(rbind(puntos_preliminares,
puntos_simples |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)),
multipuntos |>
dplyr::select(Name,Obra,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)
)
View(puntos_preliminares)
puntos_preliminares |> dplyr::mutate(join=gsub("_","-",join)) |>
st_write("../Datos/spidus_geojson_by_id_mun_poquitos_update.geojson",driver = "GeoJSON",append = FALSE)
puntos_preliminares |> dplyr::mutate(join=gsub("_","-",join)) |>
st_write("../Datos/spidus_geojson_by_id_mun_poquitos_update.geojson",driver = "GeoJSON",append = FALSE)
View(puntos_simples)
View(puntos_preliminares)
View(puntos_preliminares)
View(puntos_preliminares)
View(obras_ya_util)
View(obras_ya_util)
merge(puntos_preliminares,
obras_ya_util |>
dplyr::select(ID,Rubro) |>
dplyr::mutate(ID=paste0(ID,Acatlán,collapse = "-"))
by.x="join",by.y='ID',all.x=T)
merge(puntos_preliminares,
obras_ya_util |>
dplyr::select(ID,Rubro) |>
dplyr::mutate(ID=paste0(ID,Acatlán,collapse = "-")),
by.x="join",by.y='ID',all.x=T)
merge(puntos_preliminares,
obras_ya_util |>
dplyr::select(ID,Rubro) |>
dplyr::mutate(ID=paste0(ID,NOM_MUN,collapse = "-")),
by.x="join",by.y='ID',all.x=T)
View(obras_ya_util)
puntos_preliminares=merge(puntos_preliminares,
obras_ya_util |>
dplyr::select(ID,NOM_MUN,Rubro) |>
dplyr::mutate(ID=paste0(ID,NOM_MUN,collapse = "-")),
by.x="join",by.y='ID',all.x=T)
View(puntos_preliminares)
obras_ya_util |>
dplyr::select(ID,NOM_MUN,Rubro) |>
dplyr::mutate(ID=paste0(ID,NOM_MUN,collapse = "-"))
obras_ya_util |>
dplyr::select(ID,NOM_MUN,Rubro) |>
dplyr::rowwise() |>
dplyr::mutate(ID=paste0(ID,NOM_MUN,collapse = "-")) |>
dplyr::ungroup()
obras_ya_util |>
dplyr::select(ID,NOM_MUN,Rubro) |>
dplyr::rowwise() |>
dplyr::mutate(ID=paste0(ID, "-",NOM_MUN)) |>
dplyr::ungroup()
puntos_preliminares=st_read("../Datos/spidus_geojson_by_id_mun_poquitos.geojson")
puntos_preliminares=merge(puntos_preliminares,
obras_ya_util |>
dplyr::select(ID,NOM_MUN,Rubro) |>
dplyr::rowwise() |>
dplyr::mutate(ID=paste0(ID, "-",NOM_MUN)) |>
dplyr::ungroup(),
by.x="join",by.y='ID',all.x=T)
View(puntos_preliminares)
source("~/Jair/Repositorios/Municipal_Inversion_3_años/RProj/simulacro_de_agregar_geometrías_encontradas_a_mano.R", echo=TRUE)
View(puntos_preliminares)
puntos_preliminares=rbind(rbind(puntos_preliminares |> dplyr::select(-NOM_MUN),
puntos_simples |>
dplyr::select(Name,Obra,Rubro,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)),
multipuntos |>
dplyr::select(Name,Obra,Rubro,geometry) |>
dplyr::rowwise() |>
dplyr::mutate(Municipio_inters=
sapply(Name, function(x) {
parts <- unlist(strsplit(x, split = "_"))
parts[2]
})
) |>
dplyr::rename(join=Name,
Obra.x=Obra)
)
puntos_preliminares |> dplyr::mutate(join=gsub("_","-",join)) |>
st_write("../Datos/spidus_geojson_by_id_mun_poquitos_update.geojson",driver = "GeoJSON",append = FALSE)
##Leemos el docs con el municipio encontrado
docs_sheets=readxl::read_excel("../Ocultos/Georeferenciacion_SIPDUS.xlsx")
##Y Eve
puntos_eve=docs_sheets |>
dplyr::filter(RESPONSABLE=='evelin'&!is.na(X))
kml_eve=puntos_eve |>
dplyr::mutate(X=as.numeric(gsub("\\,","",X)))|>
dplyr::mutate(Y=as.numeric(gsub("\\,","",Y)))|>
st_as_sf(coords = c("X","Y")) |> st_set_crs(st_crs("EPSG:4326"))
View(puntos_eve)
##Y Eve
puntos_eve=docs_sheets |>
dplyr::filter(RESPONSABLE=='evelin'&!is.na(X))
View(puntos_eve)
###Primero identificamos los que no se pudieron unir.
#Al menos habrá dos donde eran de cobertura estatal y se encontró el municipio
kmls_para_merge$Name[which(kmls_para_merge$Name |> lapply(\(x){!x%in%excel_separados_por_mun_para_merge$ID}) |> unlist())]
